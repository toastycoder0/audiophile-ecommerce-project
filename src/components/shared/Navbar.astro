---
import Categories from '@/components/sections/shared/Categories.astro'
import Button from '@/components/shared/Button.astro'
import Menu from '@/components/icons/Menu.astro'
import Logo from '@/components/icons/Logo.astro'
import Cart from '@/components/icons/Cart.astro'

import { links } from '@/constants/links'

interface Props {
  showLine?: boolean
}

const { showLine = false } = Astro.props
---

<nav class='bg-black fixed z-10 top-0 left-0 w-full h-[5.625rem] px-6 md:px-10 lg:h-24'>
  <div class='w-full max-w-container mx-auto h-full flex my-auto items-center md:relative'>
    <button id='menu-btn' class='mr-[2.625rem] lg:hidden'>
      <Menu />
    </button>

    <a
      class='absolute left-1/2 -translate-x-1/2 md:relative md:left-auto md:-translate-x-0'
      href='/'
    >
      <Logo />
    </a>

    <ul class='hidden items-center gap-[2.125rem] absolute left-1/2 -translate-x-1/2 lg:flex'>
      {
        links.map(({ name, href }) => (
          <a
            class='text-[0.813rem] text-white font-bold uppercase duration-200 hover:text-orange focus-visible:text-orange'
            href={href}
          >
            {name}
          </a>
        ))
      }
    </ul>

    <button id='cart-btn' class='ml-auto'>
      <Cart />
    </button>

    {showLine && <hr class='w-full absolute bottom-0 left-0 bg-white/10 border-none h-px' />}
  </div>
</nav>

<div
  id='menu-wrapper'
  class='w-full h-full fixed top-0 left-0 bg-dark/40 z-[2] opacity-0 invisible duration-200 pt-[5.625rem] md:pt-24'
>
  <div class='w-full max-h-full overflow-y-auto'>
    <div class='px-6 py-8 rounded-b-lg bg-white'>
      <Categories />
    </div>
  </div>
</div>

<div
  id='cart-wrapper'
  class='w-full h-full fixed flex top-0 left-0 bg-dark/40 px-6 z-[2] opacity-0 invisible duration-200 pt-[5.625rem] md:px-10 md:pt-24'
>
  <div class='w-full max-w-container mx-auto flex pt-6 md:pt-8'>
    <div
      id='cart-container'
      class='w-full max-w-[23.563rem] h-[30.5rem] ml-auto flex flex-col gap-7 bg-white rounded-lg py-8 px-7 md:px-8'
    >
      <section class='flex items-center justify-between'>
        <h3 id='cart-size' class='text-lg font-bold uppercase'>Cart (0)</h3>
        <button
          id='cart-clear-btn'
          class='text-[0.938rem] underline text-dark/50 hover:text-orange focus-visible:text-orange'
        >
          Remove all
        </button>
      </section>

      <section id='cart-items' class='grow flex gap-6 flex-col overflow-y-auto'>
        <!-- <div id='cart-product' class='flex gap-4 items-center'>
          <img class='w-16 h-16 rounded-lg' src='' alt='' />
          <div class='font-bold grow'>
            <h3 class='uppercase text-[0.938rem] line-clamp-1'>XX99 MK II</h3>
            <p class='text-sm text-dark/50'>$2000</p>
          </div>
        </div> -->
      </section>

      <section>
        <div class='flex items-center justify-between mb-5'>
          <h3 class='text-[0.938rem] text-dark/50 font-medium uppercase'>Total</h3>
          <p id='cart-total' class='font-bold text-lg'>$0</p>
        </div>

        <Button href='/checkout' full>Checkout</Button>
      </section>
    </div>
  </div>
</div>

<script>
  import type { StateProduct } from '@/types/product'
  import { $ } from '@/utils/dom'
  import { formatPrice } from '@/utils/text'
  import store from '@/store/cartStore'

  const menuBtn = $('#menu-btn') as HTMLButtonElement
  const cartBtn = $('#cart-btn') as HTMLButtonElement

  const menuWrapper = $('#menu-wrapper') as HTMLDivElement
  const cartWrapper = $('#cart-wrapper') as HTMLDivElement

  const cartContainer = $('#cart-container') as HTMLDivElement
  const cartSize = $('#cart-size') as HTMLHeadingElement
  const cartTotal = $('#cart-total') as HTMLParagraphElement
  const cartClear = $('#cart-clear-btn') as HTMLButtonElement
  const cartItems = $('#cart-items') as HTMLDivElement

  let isMenuClosed = menuWrapper.classList.contains('opacity-0')
  let isCartClosed = cartWrapper.classList.contains('opacity-0')

  const createEmptyElement = () => {
    const emptyCart = document.createElement('p')
    emptyCart.textContent = 'There are no items in your cart.'
    emptyCart.classList.add('text-[0.938rem]', 'm-auto', 'text-dark/40')
    return emptyCart
  }

  const createCartItem = (product: StateProduct) => {
    const { name, image, price } = product

    const cartItem = document.createElement('div')
    cartItem.id = 'cart-product'
    cartItem.classList.add('flex', 'gap-4', 'items-center')

    const cartItemImage = document.createElement('img')
    cartItemImage.classList.add('w-16', 'h-16', 'rounded-lg')
    cartItemImage.src = image
    cartItemImage.alt = `${name} product`

    const cartItemInfo = document.createElement('div')
    cartItemInfo.classList.add('font-bold', 'grow')

    const cartItemName = document.createElement('h3')
    cartItemName.classList.add('uppercase', 'text-[0.938rem]', 'line-clamp-1')
    cartItemName.textContent = name

    const cartItemPrice = document.createElement('p')
    cartItemPrice.classList.add('text-sm', 'text-dark/50')
    cartItemPrice.textContent = formatPrice(price)

    cartItemInfo.appendChild(cartItemName)
    cartItemInfo.appendChild(cartItemPrice)

    cartItem.appendChild(cartItemImage)
    cartItem.appendChild(cartItemInfo)

    return cartItem
  }

  const toggleMenu = () => {
    if (!isCartClosed) toggleCart()

    if (isMenuClosed) {
      menuWrapper.classList.remove('opacity-0', 'invisible')
      document.body.classList.add('overflow-hidden')
      isMenuClosed = false
      return
    }

    menuWrapper.classList.add('opacity-0', 'invisible')
    document.body.classList.remove('overflow-hidden')
    isMenuClosed = true
  }

  const toggleCart = () => {
    if (!isMenuClosed) toggleMenu()

    if (isCartClosed) {
      const { cart } = store.get()
      const size = cart.reduce((acc, product) => acc + product.quantity, 0)
      const total = cart.reduce((acc, product) => acc + product.price * product.quantity, 0)

      cartSize.textContent = `Cart (${size})`
      cartTotal.textContent = formatPrice(total)

      if (size === 0) {
        cartItems.replaceChildren(createEmptyElement())
      } else {
        cartItems.replaceChildren('')
        const items = cart.map((product) => createCartItem(product))
        items.forEach((item) => cartItems.appendChild(item))
      }

      cartWrapper.classList.remove('opacity-0', 'invisible')
      document.body.classList.add('overflow-hidden')
      isCartClosed = false
      return
    }

    cartWrapper.classList.add('opacity-0', 'invisible')
    document.body.classList.remove('overflow-hidden')
    isCartClosed = true
  }

  const clearCartItems = () => {
    cartSize.textContent = 'Cart (0)'
    cartTotal.textContent = formatPrice(0)
    cartItems.replaceChildren(createEmptyElement())
    store.clear()
  }

  menuBtn.addEventListener('click', toggleMenu)
  cartBtn.addEventListener('click', toggleCart)

  cartClear.addEventListener('click', clearCartItems)

  menuWrapper.addEventListener('click', toggleMenu)
  cartWrapper.addEventListener('click', toggleCart)

  cartContainer.addEventListener('click', (e) => e.stopPropagation())
</script>
